[
    {
        "id": 4302,
        "courseUuid": "ca9b5525-6ac0-4583-a390-7db310c59b31",
        "courseMetadata": {
            "title": "Mastering Asynchronous JavaScript for Interactive Data Visualization",
            "description": "This course builds upon your existing JavaScript knowledge to explore asynchronous programming concepts, focusing on their application in creating dynamic and interactive data visualizations. You'll learn how to fetch data from APIs, handle events, and create smooth, responsive user interfaces, using techniques relevant to creating dashboards and other data-driven applications. We'll break down complex topics into digestible modules, using visual aids and practical examples.",
            "difficultyLevel": "Intermediate",
            "prerequisites": [
                "Basic JavaScript syntax",
                "functions",
                "DOM manipulation",
                "and a foundational understanding of HTML and CSS."
            ]
        },
        "modules": [
            {
                "id": 4652,
                "moduleId": "M1",
                "title": "Introduction to Asynchronous JavaScript",
                "description": "This module introduces the fundamental concepts of asynchronous programming in JavaScript. We'll explore why asynchronous operations are necessary, and how they differ from synchronous code execution.  The module sets the stage for more advanced topics by clarifying the importance of non-blocking operations in web development.",
                "duration": "1 hour",
                "complexityLevel": "Basic",
                "keyTerms": [
                    "Asynchronous JavaScript explained",
                    "Synchronous vs Asynchronous code",
                    "JavaScript Non-blocking operations",
                    "JavaScript Concurrency tutorial",
                    "JavaScript Single-threaded event loop",
                    "Callback functions JavaScript tutorial",
                    "JavaScript Asynchronous example"
                ],
                "definitions": [
                    "Asynchronous JavaScript allows code to run independently without waiting for other tasks to complete, preventing the browser from freezing.",
                    "Synchronous code executes line by line, waiting for each task to finish before moving on, while asynchronous code can start a task and move on to the next without waiting.",
                    "Non-blocking operations in JavaScript allow the program to continue executing other tasks while waiting for a long operation (like fetching data) to complete.",
                    "Concurrency in JavaScript is the ability of a program to manage multiple tasks seemingly at the same time, often using asynchronous techniques.",
                    "The JavaScript event loop is a mechanism that manages the execution of asynchronous tasks by constantly checking for pending events or callbacks.",
                    "Callback functions in JavaScript are functions passed as arguments to other functions, to be executed when an asynchronous operation completes.",
                    "An asynchronous JavaScript example is fetching data from an API, allowing the UI to remain responsive while the data loads."
                ],
                "learningObjectives": [
                    "Define asynchronous programming and its benefits.",
                    "Explain the difference between synchronous and asynchronous execution.",
                    "Identify common use cases for asynchronous JavaScript."
                ],
                "prerequisiteModules": null
            },
            {
                "id": 4653,
                "moduleId": "M2",
                "title": "JavaScript Promises for Asynchronous Operations",
                "description": "This module dives into JavaScript Promises, a core mechanism for handling asynchronous operations more effectively than traditional callbacks.  You'll learn how to create, resolve, and reject Promises, and how to chain them together for complex asynchronous workflows. We'll use visual aids to illustrate Promise states and execution flow.",
                "duration": "1.5 hours",
                "complexityLevel": "Intermediate",
                "keyTerms": [
                    "JavaScript Promise states explained",
                    "Creating JavaScript Promises tutorial",
                    "Resolving JavaScript Promises example",
                    "Rejecting JavaScript Promises handling",
                    "Chaining JavaScript Promises guide",
                    "JavaScript Promise .then() method",
                    "JavaScript Promise .catch() method",
                    "Asynchronous JavaScript Promise example"
                ],
                "definitions": [
                    "JavaScript Promise states represent the outcome of an asynchronous operation: pending, fulfilled (resolved), or rejected.",
                    "Creating JavaScript Promises involves using the 'new Promise()' constructor and defining the resolve and reject functions.",
                    "Resolving JavaScript Promises means successfully completing the asynchronous operation and calling the 'resolve()' function with the result.",
                    "Rejecting JavaScript Promises means the asynchronous operation failed, and calling the 'reject()' function with an error message.",
                    "Chaining JavaScript Promises allows you to execute multiple asynchronous operations in a sequence, passing the result of one operation to the next.",
                    "The JavaScript Promise '.then()' method is used to handle the resolved value of a Promise.",
                    "The JavaScript Promise '.catch()' method is used to handle errors or rejections in a Promise.",
                    "An Asynchronous JavaScript Promise example is fetching data from an API and handling the result or any errors that occur."
                ],
                "learningObjectives": [
                    "Explain the purpose and states of a JavaScript Promise.",
                    "Create and use Promises to handle asynchronous operations.",
                    "Chain Promises together to manage complex asynchronous workflows."
                ],
                "prerequisiteModules": null
            }
        ]
    },
    {
        "id": 4502,
        "courseUuid": "402262e8-23ad-4054-8e25-f38cd084d69c",
        "courseMetadata": {
            "title": "Interactive Web Development Fundamentals",
            "description": "This course provides a practical introduction to building interactive web applications. It's designed for developers with an intermediate understanding of HTML, CSS, and JavaScript who want to learn how to create dynamic content and engaging user experiences.  The course focuses on well-established techniques with readily available learning resources.",
            "difficultyLevel": "Intermediate",
            "prerequisites": [
                "Solid understanding of HTML, CSS, and basic JavaScript concepts (variables, functions, DOM manipulation)."
            ]
        },
        "modules": [
            {
                "id": 4852,
                "moduleId": "M1",
                "title": "JavaScript Events: Making Web Pages React",
                "description": "Learn how to use JavaScript events to make your web pages respond to user interactions. This module covers common events like clicks, mouseovers, and form submissions, and demonstrates how to trigger JavaScript code in response to these events. Understanding events is crucial for creating dynamic and interactive websites.",
                "duration": "1 hour",
                "complexityLevel": "Basic",
                "keyTerms": [
                    "JavaScript event listeners explained",
                    "Common JavaScript event types",
                    "JavaScript click event example",
                    "JavaScript mouseover event tutorial",
                    "JavaScript event handler functions",
                    "AddEventListener method in JavaScript",
                    "JavaScript preventDefault method"
                ],
                "definitions": [
                    "Event listeners 'listen' for specific actions (like a click) on an element and trigger a function when that action happens.",
                    "Event types are different categories of actions a user can take, such as clicking a button, hovering over an image, or typing in a text box.",
                    "A click event happens when a user presses and releases the mouse button on an element. Like pushing a button on your TV remote.",
                    "A mouseover event triggers when the mouse cursor moves onto an element. Imagine a light switch turning on when you put your hand near it.",
                    "Event handler functions are blocks of code that run in response to an event. They're like the instructions that tell the computer what to do when something happens.",
                    "addEventListener() is a JavaScript method used to attach an event listener to an HTML element, telling it to 'listen' for a specific event.",
                    "preventDefault() is a JavaScript method that stops the default behavior of an HTML element. For example, preventing a link from navigating to a new page."
                ],
                "learningObjectives": [
                    "Explain the concept of event listeners and event handlers.",
                    "Implement common JavaScript events (click, mouseover, keypress) on web page elements."
                ],
                "prerequisiteModules": null
            },
            {
                "id": 4853,
                "moduleId": "M2",
                "title": "DOM Manipulation with JavaScript: Changing Web Content",
                "description": "This module explores how to use JavaScript to manipulate the Document Object Model (DOM).  Learn how to dynamically add, remove, and modify HTML elements and their attributes.  Mastering DOM manipulation enables you to create truly interactive and responsive web pages.",
                "duration": "1.5 hours",
                "complexityLevel": "Intermediate",
                "keyTerms": [
                    "JavaScript Document Object Model DOM",
                    "JavaScript getElementById tutorial",
                    "JavaScript querySelectorAll example",
                    "JavaScript innerHTML property use",
                    "JavaScript createElement tutorial",
                    "JavaScript appendChild method explained",
                    "JavaScript removeChild method guide"
                ],
                "definitions": [
                    "The DOM is a tree-like structure representing the HTML of a web page, allowing JavaScript to access and change elements.",
                    "getElementById() is a JavaScript method that finds a specific HTML element by its unique ID. Like finding a specific book on a shelf using its call number.",
                    "querySelectorAll() is a JavaScript method that returns a list of all HTML elements that match a specific CSS selector. Like searching for all books about a certain topic.",
                    "innerHTML is a property that allows you to get or set the HTML content inside an element. It's like reading or rewriting the text within a paragraph.",
                    "createElement() is a JavaScript method that creates a new HTML element. It’s like building a new brick before adding it to a wall.",
                    "appendChild() is a JavaScript method that adds a new child element to a parent element. Like gluing a piece of paper onto a larger poster.",
                    "removeChild() is a JavaScript method that removes a child element from its parent element. Like taking a brick out of a wall."
                ],
                "learningObjectives": [
                    "Use JavaScript to select and modify HTML elements.",
                    "Dynamically add and remove elements from the DOM."
                ],
                "prerequisiteModules": null
            }
        ]
    }
]